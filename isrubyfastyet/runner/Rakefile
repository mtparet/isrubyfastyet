require 'tempfile'
require 'benchmark'
require 'rubygems'
#require 'fan'

begin
  require 'artii'
rescue LoadError
end

# turn the config file into an array of hashes
def rubies
  rows = File.read(File.join(File.dirname(__FILE__), 'rubies')).lines.map(&:chomp).select { |line| line !~ /^\s*#/ }.map { |line| line.split(/\s\s+/) }

  headers = rows.shift

  rows.map do |row|
    {}.tap do |hash|
      row.each_with_index do |cell, i|
        hash.merge!(headers[i] => cell)
      end
    end
  end
end

def run_with_output(command)
  note = "Running: #{command}"
  puts "=" * note.size
  puts note
  puts "=" * note.size

  Process.wait( fork { exec command } )
  $?.success? # return whether command succeeded or not
end

def relative_path(path)
  File.join(File.dirname(__FILE__), path)
end

def script_path(script)
  relative_path("scripts/#{script}")
end

def puts_title(str)
  if defined?(Artii)
    # pretty ascii art
    puts Artii::Base.new.output(str)
  else
    puts
    puts str.chars.to_a.join(" ")
    puts
  end
end

def benchmark_file_paths
  Dir.glob(relative_path('benchmarks/*/*benchmark.rb'))
end

def benchmark_folder_paths
  benchmark_file_paths.map { |path| File.dirname(path) }.uniq
end

# install or update the Ruby
# returns true or false for success or failure
def install_ruby(ruby)
  ruby_install_succeeded = false
  ruby_install_duration = Benchmark.realtime do
	# fail if install takes longer than 33 minutes
	install_flags_argument = ruby['Install Flags'] == "none" ? "''" : "'#{ruby['Install Flags']}'"
	ruby_install_succeeded = run_with_output "timeout --kill-after=5 #{60*60} #{script_path 'setup_ruby'} #{ruby['RVM Name']} #{install_flags_argument} '#{ruby['Before Install']}'"
  end
  puts(ruby_install_succeeded ? "successfully installed" : "failed to install")
  puts "Done installing #{ruby['RVM Name']}. Took %.1f minutes" % [ruby_install_duration / 60]

  ruby_install_succeeded
end

# uninstall the given ruby implementation
def uninstall_ruby(ruby)
  run_with_output "timeout --kill-after=5 #{20*60} #{script_path 'uninstall_ruby'} #{ruby['RVM Name']}"
end


task :default => :benchmark_suite

desc "Install or update each of the ruby implimentations in the runner/rubies file. Head rubies are always re-installed. Others are re-installed if their RVM definition has changed."
task :update_rubies do
  puts "Installing or reinstalling rubies..."
  successes = rubies.map do |ruby|
    puts_title(ruby['Nice Name'])
	success = install_ruby(ruby)

    [success, ruby]
  end

  puts successes.map { |success, ruby| "#{success ? "SUCCESS" : "FAILURE"}: #{ruby['RVM Name']}" }.join("\n")
end

desc "Uninstall each of the ruby implimentations in the runner/rubies file."
task :uninstall_rubies do
  puts "Uninstalling rubies..."
  rubies.each do |ruby|
    puts_title(ruby['Nice Name'])

    uninstall_ruby(ruby)
  end
end

desc "Wipe and reinstall each of the ruby implimentations in the runner/rubies file."
task :wipe_and_reinstall_rubies => [:uninstall_rubies, :update_rubies]

desc "Run the benchmarks for each Ruby"
task :benchmark_suite do
  p rubies

  # get the fans going
  # Fan.maximize_all!
  # at_exit { Fan.return_all_to_normal! }

  result_tempfile = Tempfile.new("benchmark_result")

  rubies.each do |ruby|

    ruby_duration = Benchmark.realtime do

      puts_title(ruby['Nice Name'])

      bundle_succeeded       = false
      ruby_install_succeeded = install_ruby(ruby)

      # run benchmarks
      benchmark_file_paths.each do |benchmark_file_path|

        benchmark_file_path =~ /benchmarks\/([^\/]+)\/([^\/]*)benchmark\.rb/
        benchmark_suite_name = $1
        benchmark_script_name = ($2 == '' ? nil : $2.chop)
        benchmark_full_name = [benchmark_suite_name, benchmark_script_name].compact.join('_')

        # set up Gemfile.lock
        bundle_succeeded = if ruby_install_succeeded
	      benchmark_folder_path = File.dirname(benchmark_file_path)
          run_with_output "timeout --kill-after=5 #{20*60} #{script_path 'setup_bundle'} #{benchmark_folder_path} #{ruby['RVM Name']} '#{ruby['Before Bundle']}'"
        end

        benchmark_duration = Benchmark.realtime do

          if ruby_install_succeeded && bundle_succeeded
            run_with_output "#{script_path 'run_benchmark'} #{File.dirname(benchmark_file_path)} #{ruby['RVM Name']} '#{ruby['Command']}' '#{ruby['Before Run']}' #{benchmark_file_path} #{result_tempfile.path}"

            result_tempfile.rewind
            result = result_tempfile.read.chomp

            full_version_string = `#{script_path 'ruby_version_in_rvm'} #{ruby['RVM Name']} #{ruby['Command']}`.lines.to_a.last.strip
          else
            result = ruby_install_succeeded ? "bundle failed" : "failed to install #{ruby['RVM Name']}"
            full_version_string = result
          end

          File.open(relative_path("../results/#{benchmark_full_name}_results.tsv"), 'a') do |results_file|
            results_file.puts [Time.now.utc.strftime("%F %T UTC"), ruby['RVM Name'], result, full_version_string].join("\t")
          end

          puts result

        end

        puts "Done with #{benchmark_full_name.gsub('_',' ')} for #{ruby['RVM Name']}. Took %.1f minutes" % [benchmark_duration / 60]

      end

    end

    puts
    puts "Done with #{ruby['Nice Name']}. Took %.1f minutes" % [ruby_duration / 60]
    puts

  end
end